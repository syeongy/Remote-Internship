{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8f3119aa",
   "metadata": {},
   "source": [
    "## Mercedes-Benz Greener Manufacturing\n",
    "\n",
    "Source : https://www.kaggle.com/competitions/mercedes-benz-greener-manufacturing/data\n",
    "\n",
    "- Benz 테스트 과정에서 측정한 수치값을 EDA 해봅니다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "125fc348",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 데이터분석 4종 세트\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3615c24a",
   "metadata": {},
   "outputs": [],
   "source": [
    "train = pd.read_csv(\"data/train.csv\")\n",
    "test = pd.read_csv(\"data/test.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38c5548e",
   "metadata": {},
   "source": [
    "### Q1. \"y\" column의 분포를 그려주는 histogram을 출력하세요."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "adb06474",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([128.,  59., 989., 773., 617., 818., 498., 176.,  70.,  33.,  24.,\n",
       "          7.,  10.,   3.,   2.,   1.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
       "          0.,   0.,   0.,   0.,   0.,   0.,   0.,   1.]),\n",
       " array([ 72.11      ,  78.55033333,  84.99066667,  91.431     ,\n",
       "         97.87133333, 104.31166667, 110.752     , 117.19233333,\n",
       "        123.63266667, 130.073     , 136.51333333, 142.95366667,\n",
       "        149.394     , 155.83433333, 162.27466667, 168.715     ,\n",
       "        175.15533333, 181.59566667, 188.036     , 194.47633333,\n",
       "        200.91666667, 207.357     , 213.79733333, 220.23766667,\n",
       "        226.678     , 233.11833333, 239.55866667, 245.999     ,\n",
       "        252.43933333, 258.87966667, 265.32      ]),\n",
       " <BarContainer object of 30 artists>)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(train['y'], bins=30, edgecolor='black')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "2b704c5d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['ID', 'y', 'X0', 'X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X8',\n",
       "       ...\n",
       "       'X375', 'X376', 'X377', 'X378', 'X379', 'X380', 'X382', 'X383', 'X384',\n",
       "       'X385'],\n",
       "      dtype='object', length=378)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b690f95",
   "metadata": {},
   "source": [
    "### Q2. 체크한 y값중에서 전체 데이터의 분포를 아득히 넘어가는 데이터를 찾고 지워주세요.\n",
    "\n",
    "- 이러한 데이터를 Outlier라고 하며, 검출 방법마다 다르게 수행합니다.\n",
    "\n",
    "- 이번에는 **y값들의 평균에서 \"표준편차 * 3\" 보다 멀리 떨어진** 데이터들을 기준으로 합니다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "18805c31",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        ID       y  X0  X1  X2 X3 X4  X5 X6 X8  ...  X375  X376  X377  X378  \\\n",
      "43     107  139.20   w   s  as  c  d   j  i  q  ...     1     0     0     0   \n",
      "216    433  146.83   x   i  as  c  d   i  g  l  ...     0     0     1     0   \n",
      "253    505  150.43   t   b  as  c  d   i  l  x  ...     0     0     1     0   \n",
      "342    681  169.91  aa   l  ak  f  d   i  c  d  ...     0     0     0     0   \n",
      "429    836  154.87  ak   l  ae  f  d   d  g  w  ...     0     0     0     0   \n",
      "681   1322  147.72   x   i  ae  c  d   c  g  y  ...     0     0     1     0   \n",
      "846   1671  140.49   x  aa   i  c  d  af  l  c  ...     1     0     0     0   \n",
      "883   1770  265.32   y   r  ai  f  d  ag  l  t  ...     0     0     0     0   \n",
      "889   1784  158.53  aj   l  as  f  d  ag  k  e  ...     0     0     0     0   \n",
      "900   1799  141.31   x  aa  as  c  d  ag  j  j  ...     1     0     0     0   \n",
      "995   1989  140.15   x   b   m  c  d  ag  j  j  ...     0     0     1     0   \n",
      "1033  2058  140.41   x  aa   n  e  d  ag  l  j  ...     1     0     0     0   \n",
      "1036  2065  144.36   x  aa  as  d  d  ag  d  s  ...     0     1     0     0   \n",
      "1060  2111  154.43   w   v   r  c  d  ag  d  q  ...     1     0     0     0   \n",
      "1141  2264  149.63  ap   l   s  c  d  ab  j  w  ...     0     0     0     0   \n",
      "1203  2396  160.87   j   o  as  f  d  ab  g  p  ...     1     0     0     0   \n",
      "1205  2403  150.89   x   b   m  c  d  ab  j  j  ...     0     0     1     0   \n",
      "1269  2511  152.32   s  aa   m  c  d  ab  g  g  ...     1     0     0     0   \n",
      "1279  2531  139.08   x   b  as  c  d  ac  j  y  ...     0     0     1     0   \n",
      "1349  2669  142.71  ak   l  ae  f  d  ac  i  v  ...     0     0     0     0   \n",
      "1459  2903  167.45  ai   b  ae  a  d  ac  g  m  ...     0     0     1     0   \n",
      "1730  3456  139.61  ak   v  ak  c  d  ae  a  x  ...     1     0     0     0   \n",
      "2240  4481  154.16   w   n  as  f  d   k  j  r  ...     1     0     0     0   \n",
      "2348  4705  140.25  ay   i  as  c  d   n  j  k  ...     0     0     1     0   \n",
      "2357  4722  142.71   a   v   k  c  d   n  j  e  ...     0     1     0     0   \n",
      "2376  4762  148.94   w   s  as  c  d   n  h  w  ...     0     0     1     0   \n",
      "2735  5471  158.23   x   v   e  c  d   m  g  s  ...     0     0     0     0   \n",
      "2736  5473  153.51   x   i  as  a  d   m  j  r  ...     0     0     1     0   \n",
      "2852  5706  141.39   z   b   m  a  d   p  h  j  ...     0     0     1     0   \n",
      "2887  5781  144.56   v   s  as  c  d   p  j  p  ...     1     0     0     0   \n",
      "2905  5820  147.22  ay  aa  as  c  d   p  j  f  ...     1     0     0     0   \n",
      "2983  5979  139.16   j   i  as  c  d   q  l  r  ...     0     0     1     0   \n",
      "3028  6078  140.31  ap   l   s  c  d   q  g  h  ...     0     0     0     0   \n",
      "3090  6208  146.30  au   b  aa  c  d   q  c  n  ...     0     0     1     0   \n",
      "3133  6273  165.52  aj   v   r  c  d   q  g  a  ...     0     0     1     0   \n",
      "3215  6422  141.09  at   f  ae  c  d   s  b  l  ...     0     1     0     0   \n",
      "3442  6873  139.07   f   c   m  c  d   r  j  y  ...     0     0     1     0   \n",
      "3744  7500  155.62   x   f  ak  c  d   v  d  d  ...     1     0     0     0   \n",
      "3980  7980  142.46   w   s  as  a  d   w  j  k  ...     0     1     0     0   \n",
      "4176  8344  149.52  ak   l  as  a  d  aa  j  r  ...     0     0     1     0   \n",
      "\n",
      "      X379  X380  X382  X383  X384  X385  \n",
      "43       0     0     0     0     0     0  \n",
      "216      0     0     0     0     0     0  \n",
      "253      0     0     0     1     0     0  \n",
      "342      0     0     0     0     0     0  \n",
      "429      0     0     0     0     0     0  \n",
      "681      0     0     0     0     0     0  \n",
      "846      0     0     0     0     0     0  \n",
      "883      0     0     0     0     0     0  \n",
      "889      0     0     0     0     0     0  \n",
      "900      0     0     0     0     0     0  \n",
      "995      0     0     0     0     0     0  \n",
      "1033     0     0     0     0     0     0  \n",
      "1036     0     0     0     0     0     0  \n",
      "1060     0     0     0     0     0     0  \n",
      "1141     0     0     0     0     0     0  \n",
      "1203     0     0     0     0     0     0  \n",
      "1205     0     0     0     0     0     0  \n",
      "1269     0     0     0     0     0     0  \n",
      "1279     0     0     0     0     0     0  \n",
      "1349     0     0     0     0     0     0  \n",
      "1459     0     0     0     0     0     0  \n",
      "1730     0     0     0     0     0     0  \n",
      "2240     0     0     0     0     0     0  \n",
      "2348     0     0     0     0     0     0  \n",
      "2357     0     0     0     0     0     0  \n",
      "2376     0     0     0     0     0     0  \n",
      "2735     1     0     0     0     0     0  \n",
      "2736     0     0     0     0     0     0  \n",
      "2852     0     0     0     0     0     0  \n",
      "2887     0     0     0     0     0     0  \n",
      "2905     0     0     0     0     0     0  \n",
      "2983     0     0     0     0     0     0  \n",
      "3028     0     0     0     0     0     0  \n",
      "3090     0     0     0     1     0     0  \n",
      "3133     0     0     0     0     0     0  \n",
      "3215     0     0     0     0     0     0  \n",
      "3442     0     0     0     0     0     0  \n",
      "3744     0     0     0     0     0     0  \n",
      "3980     0     0     0     0     0     0  \n",
      "4176     0     0     0     0     0     0  \n",
      "\n",
      "[40 rows x 378 columns]\n"
     ]
    }
   ],
   "source": [
    "mean_y = train['y'].mean()\n",
    "std_y = train['y'].std()\n",
    "\n",
    "filter_train = train[(train['y'] >= mean_y - 3 * std_y) & (train['y'] <= mean_y + 3 * std_y)]\n",
    "outlier_train = train[~train.index.isin(filter_train.index)]\n",
    "\n",
    "print(outlier_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "541201c3",
   "metadata": {},
   "source": [
    "### Q3. train data에 대한 결측 비율을 column별로 나타내주세요."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "e83d5bd4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ID      0.0\n",
      "y       0.0\n",
      "X0      0.0\n",
      "X1      0.0\n",
      "X2      0.0\n",
      "       ... \n",
      "X380    0.0\n",
      "X382    0.0\n",
      "X383    0.0\n",
      "X384    0.0\n",
      "X385    0.0\n",
      "Length: 378, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "null_train = train.isnull().mean()\n",
    "print(null_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48359607",
   "metadata": {},
   "source": [
    "### Q4. 모든 column들의 피어슨 상관계수를 출력하는 correlation matrix를 heatmap으로 출력해주세요."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "53522a74",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            ID         y       X10  X11       X12       X13       X14  \\\n",
      "ID    1.000000 -0.055108  0.001602  NaN  0.058988 -0.031917 -0.025438   \n",
      "y    -0.055108  1.000000 -0.026985  NaN  0.089792  0.048276  0.193643   \n",
      "X10   0.001602 -0.026985  1.000000  NaN -0.033084 -0.028806 -0.100474   \n",
      "X11        NaN       NaN       NaN  NaN       NaN       NaN       NaN   \n",
      "X12   0.058988  0.089792 -0.033084  NaN  1.000000  0.214825 -0.246513   \n",
      "...        ...       ...       ...  ...       ...       ...       ...   \n",
      "X380 -0.013577  0.040932 -0.010479  NaN -0.005566  0.023045  0.007743   \n",
      "X382 -0.038171 -0.159815 -0.010164  NaN -0.024937 -0.021713  0.012713   \n",
      "X383 -0.009332  0.040291 -0.004740  NaN -0.011628 -0.010125  0.023604   \n",
      "X384 -0.015355 -0.004591 -0.002532  NaN -0.006212  0.041242  0.025199   \n",
      "X385  0.029059 -0.022280 -0.004387  NaN -0.010765 -0.009373  0.043667   \n",
      "\n",
      "           X15       X16       X17  ...      X375      X376      X377  \\\n",
      "ID    0.002237 -0.036480 -0.038171  ...  0.045229 -0.080259 -0.022965   \n",
      "y     0.023116  0.048946 -0.159815  ...  0.029100  0.114005  0.061403   \n",
      "X10  -0.002532 -0.005944 -0.010164  ...  0.165277 -0.028618 -0.074244   \n",
      "X11        NaN       NaN       NaN  ...       NaN       NaN       NaN   \n",
      "X12  -0.006212 -0.014584 -0.024937  ... -0.107864 -0.070214  0.030134   \n",
      "...        ...       ...       ...  ...       ...       ...       ...   \n",
      "X380 -0.001968 -0.004619 -0.007899  ... -0.061741 -0.022240 -0.061168   \n",
      "X382 -0.001908 -0.004480  1.000000  ... -0.059883 -0.021571 -0.059327   \n",
      "X383 -0.000890 -0.002089 -0.003572  ... -0.015413 -0.010059  0.035107   \n",
      "X384 -0.000475 -0.001116 -0.001908  ... -0.014917 -0.005373  0.008694   \n",
      "X385 -0.000824 -0.001934 -0.003307  ...  0.055225 -0.009311 -0.025610   \n",
      "\n",
      "          X378      X379      X380      X382      X383      X384      X385  \n",
      "ID    0.030371  0.023382 -0.013577 -0.038171 -0.009332 -0.015355  0.029059  \n",
      "y    -0.258679  0.067919  0.040932 -0.159815  0.040291 -0.004591 -0.022280  \n",
      "X10  -0.016870 -0.011374 -0.010479 -0.010164 -0.004740 -0.002532 -0.004387  \n",
      "X11        NaN       NaN       NaN       NaN       NaN       NaN       NaN  \n",
      "X12  -0.016043 -0.027907 -0.005566 -0.024937 -0.011628 -0.006212 -0.010765  \n",
      "...        ...       ...       ...       ...       ...       ...       ...  \n",
      "X380 -0.013110 -0.008839  1.000000 -0.007899 -0.003683 -0.001968 -0.003410  \n",
      "X382 -0.012716 -0.008573 -0.007899  1.000000 -0.003572 -0.001908 -0.003307  \n",
      "X383 -0.005930 -0.003998 -0.003683 -0.003572  1.000000 -0.000890 -0.001542  \n",
      "X384 -0.003168 -0.002136 -0.001968 -0.001908 -0.000890  1.000000 -0.000824  \n",
      "X385 -0.005489 -0.003701 -0.003410 -0.003307 -0.001542 -0.000824  1.000000  \n",
      "\n",
      "[370 rows x 370 columns]\n"
     ]
    }
   ],
   "source": [
    "correlation_matrix = train.corr()\n",
    "print(correlation_matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f1fa16f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(12, 10))\n",
    "sns.heatmap(correlation_matrix, annot=True, cmap='Blues', fmt='.2f')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c339071",
   "metadata": {},
   "source": [
    "### Q5. test 데이터중에서 모든 column의 값이 똑같은 column들을 찾아서 출력해주세요."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4d523236",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['X257', 'X258', 'X295', 'X296', 'X369'], dtype='object')\n"
     ]
    }
   ],
   "source": [
    "unique_test = test.nunique()\n",
    "same_test = unique_test[unique_test == 1].index\n",
    "print(same_test)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
